$extern void InitVideo();
$extern void ShowFullImage(const std::string& name, unsigned int timeOutInSecond);

void InitVideo();
extern int PlayMovie(const std::string name);
extern void ShowFullImage(const std::string name, unsigned int timeOutInSecond);
extern void SaveMapPNG(const char *name);

class CVideo
{
public:
	int Width;
	int Height;
	int Depth;
	bool FullScreen;
	bool ResizeScreen(int width, int height);
};

CVideo Video;
void ToggleFullScreen(void);

$using CGraphicPtr = std::shared_ptr<CGraphic>;
$void Load(CGraphicPtr* p, bool grayscale) { (*p)->Load(grayscale); }
$void Resize(CGraphicPtr* p, int w, int h) { (*p)->Resize(w, h); }
$void SetPaletteColor(CGraphicPtr* p, int idx, int r, int g, int b) { (*p)->SetPaletteColor(idx, r, g, b); }
$void OverlayGraphic(CGraphicPtr* p, CGraphicPtr g, bool mask) { (*p)->OverlayGraphic(g.get(), mask); }

$using CPlayerColorGraphicPtr = std::shared_ptr<CPlayerColorGraphic>;
$void Load(CPlayerColorGraphicPtr* p, bool grayscale) { (*p)->Load(grayscale); }
$void Resize(CPlayerColorGraphicPtr* p, int w, int h) { (*p)->Resize(w, h); }
$void SetPaletteColor(CPlayerColorGraphicPtr* p, int idx, int r, int g, int b) { (*p)->SetPaletteColor(idx, r, g, b); }
$void OverlayGraphic(CPlayerColorGraphicPtr* p, CGraphicPtr g, bool mask) { (*p)->OverlayGraphic(g.get(), mask); }

struct CGraphicPtr // std::shared_ptr<CGraphic>
{
	tolua_outside void Load @ Load(bool grayscale = false);
	tolua_outside void Resize @ Resize(int w, int h);
	tolua_outside void SetPaletteColor @ SetPaletteColor(int idx, int r, int g, int b);
	tolua_outside void OverlayGraphic @ OverlayGraphic(CGraphicPtr g, bool mask = false);
};

struct CPlayerColorGraphicPtr // std::shared_ptr<CPlayerColorGraphic>
{
	tolua_outside void Load @ Load(bool grayscale = false);
	tolua_outside void Resize @ Resize(int w, int h);
	tolua_outside void SetPaletteColor @ SetPaletteColor(int idx, int r, int g, int b);
	tolua_outside void OverlayGraphic @ OverlayGraphic(CGraphicPtr g, bool mask = false);
};

class CGraphic
{
public:
	static CGraphicPtr New(const std::string file, int w = 0, int h = 0);
	static CGraphicPtr ForceNew(const std::string file, int w = 0, int h = 0);
	static CGraphicPtr Get(const std::string file);
};

class CPlayerColorGraphic : public CGraphic
{
public:
	static CPlayerColorGraphicPtr New(const std::string file, int w = 0, int h = 0);
	static CPlayerColorGraphicPtr ForceNew(const std::string file, int w = 0, int h = 0);
	static CPlayerColorGraphicPtr Get(const std::string file);
};

class CColor {
	CColor(unsigned char r = 0, unsigned char g = 0, unsigned char b = 0,
		unsigned char a = 255);

	unsigned char R;
	unsigned char G;
	unsigned char B;
	unsigned char A;
};

void SetColorCycleAll(bool value);
void ClearAllColorCyclingRange();
void AddColorCyclingRange(unsigned int startColorIndex, unsigned int endColorIndex);
unsigned int SetColorCycleSpeed(unsigned int speed);

class Mng
{
public:
		static Mng *New(const std::string name);
		static void Free(Mng *mng);
        bool Load();
        void Draw(int x, int y);
        void Reset();

		static int MaxFPS;
}

class Movie
{
public:
        Movie();
        bool Load(const std::string name, int w, int h);
        bool IsPlaying();
}
